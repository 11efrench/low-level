   1              	
   2              		.equ	ROWS, 		25		# number of rows
   3              		.equ	COLS, 		80		# number of columns
   4              	
   5              		.equ	CHARBYTES,	2		# total #bytes per char
   6              		.equ	ROWBYTES,	COLS*CHARBYTES	# total #bytes per row
   7              		.equ	SCREENBYTES,	ROWS*ROWBYTES	# total #bytes per screen
   8              	
   9              		.equ	SPACE,		32		# blank space
  10              		.equ	NEWLINE,	'\n'		# newline character
  11              	
  12              		.equ	DEFAULT_ATTR, 	0x2e		# PSU Green
  13              	
  14              		.data
  15              	
  16              	        # Reserve space for a video ram frame buffer with
  17              	        # 25 rows; 80 columns; and one code and one attribute
  18              	        # byte per character.
  19              		.globl  video
  20              		.align	4
  21 0000 00000000 	video:	.space	SCREENBYTES
  21      00000000 
  21      00000000 
  21      00000000 
  21      00000000 
  22              	
  23              	        # Some variables to hold the current row, column, and
  24              		# video attribute:
  25              		.align	4
  26 0fa0 00000000 	row:	.long	0		# we will only use the least significant
  27 0fa4 00000000 	col:	.long	0		# bytes of these variables
  28 0fa8 00000000 	attr:	.long	0
  29              	
  30              		.text
  31              	
  32              		# Clear the screen, setting all characters to SPACE
  33              	        # using the DEFAULT_ATTR attribute.
  34              		.globl	cls
  35 0000 55       	cls:	pushl	%ebp
  36 0001 89E5     		movl	%esp, %ebp
  37              		# Fill me in!
  38 0003 B9D00700 	        movl    $(SCREENBYTES>>1),       %ecx
  38      00
  39 0008 B8000000 	        movl    $video,          %eax
  39      00
  40 000d C60020   	loop:   movb    $SPACE,          (%eax)
  41 0010 C640012E 	        movb    $DEFAULT_ATTR,   1(%eax)
  42 0014 83C002   	        add     $2,              %eax
  43 0017 49       	        decl    %ecx
  44 0018 75F3     	        jnz     loop
  45 001a 89EC     		movl	%ebp,            %esp
  46 001c 5D       		popl	%ebp
  47 001d C3       		ret
  48              	
  49              		# Set the video attribute for characters output using outc.
  50              		.globl	setAttr
  51 001e 55       	setAttr:pushl	%ebp
  52 001f 89E5     		movl	%esp, %ebp
  53              		# Fill me in!
  54 0021 89EC     		movl	%ebp, %esp
  55 0023 5D       		popl	%ebp
  56 0024 C3       		ret
  57              	
  58              		# Output a single character at the current row and col position
  59              		# on screen, advancing the cursor coordinates and scrolling the
  60              		# screen as appropriate.  Special treatment is provided for
  61              	        # NEWLINE characters, moving the "cursor" to the start of the
  62              		# "next line".
  63              		.globl	outc
  64 0025 55       	outc:	pushl	%ebp
  65 0026 89E5     		movl	%esp, %ebp
  66              		# Fill me in!
  67 0028 B8000000 	        movl    $video, %eax
  67      00
  68 002d BBA00000 	        movl    $ROWBYTES, %ebx
  68      00
  69 0032 B9E80300 	        movl    $(SCREENBYTES >> 2),   %ecx
  69      00
  70 0037 8B1418   	scroll: movl    (%eax, %ebx, 1), %edx
  71 003a 8910     	        movl    %edx, (%eax)
  72 003c 40       	        incl    %eax
  73 003d 49       	        decl    %ecx
  74 003e 75F7     	        jnz     scroll
  75 0040 89EC     		movl	%ebp, %esp
  76 0042 5D       		popl	%ebp
  77 0043 C3       		ret
  78              	
  79              		# Output an unsigned numeric value as a sequence of 8 hex digits.
  80              		.globl	outhex
  81 0044 55       	outhex:	pushl	%ebp
  82 0045 89E5     		movl	%esp, %ebp
  83              		# Fill me in!
  84 0047 89EC     		movl	%ebp, %esp
  85 0049 5D       		popl	%ebp
  86 004a C3       		ret
  87              	
DEFINED SYMBOLS
          videoasm.s:2      *ABS*:0000000000000019 ROWS
          videoasm.s:3      *ABS*:0000000000000050 COLS
          videoasm.s:5      *ABS*:0000000000000002 CHARBYTES
          videoasm.s:6      *ABS*:00000000000000a0 ROWBYTES
          videoasm.s:7      *ABS*:0000000000000fa0 SCREENBYTES
          videoasm.s:9      *ABS*:0000000000000020 SPACE
          videoasm.s:10     *ABS*:000000000000000a NEWLINE
          videoasm.s:12     *ABS*:000000000000002e DEFAULT_ATTR
          videoasm.s:21     .data:0000000000000000 video
          videoasm.s:26     .data:0000000000000fa0 row
          videoasm.s:27     .data:0000000000000fa4 col
          videoasm.s:28     .data:0000000000000fa8 attr
          videoasm.s:35     .text:0000000000000000 cls
          videoasm.s:40     .text:000000000000000d loop
          videoasm.s:51     .text:000000000000001e setAttr
          videoasm.s:64     .text:0000000000000025 outc
          videoasm.s:70     .text:0000000000000037 scroll
          videoasm.s:81     .text:0000000000000044 outhex

NO UNDEFINED SYMBOLS
